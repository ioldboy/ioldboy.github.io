<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>linux应急响应</title>
      <link href="/posts/45122.html"/>
      <url>/posts/45122.html</url>
      
        <content type="html"><![CDATA[<p>最近在进行应急响应时遇到linux系统比较多，之前在对linux系统进行排查的时候，没有一个严谨的流程，导致在溯源分析的过程比较混乱，常常一个命令运行多遍。所以就想对linux系统的应急进行一下总结，具体需要排查哪些方面和使用哪些命令，流程是怎样的。</p><p>linux出现问题主要是病毒挖矿和webshell植入两种场景，我们就从这两种场景分别进行总结。</p><h3 id="病毒挖矿"><a href="#病毒挖矿" class="headerlink" title="病毒挖矿"></a>病毒挖矿</h3><p>在接到应急的项目后。我们在到达现场，首先需要和客户沟通如下内容：服务器是否存在Web服务，服务器的口令强弱，服务器的网络架构。沟通的目的在于了解挖矿病毒是由什么方式植入，如果是存在Web服务，需要进一步对Web服务进行排查，口令强弱在于可能会利用ssh弱口令直接登录后植入，网络架构的了解是为了存不存在横向移动的风险。对这些内容了解后，我们开始进行具体的排查步骤。</p><h5 id="进程服务相关"><a href="#进程服务相关" class="headerlink" title="进程服务相关"></a>进程服务相关</h5><h6 id="top"><a href="#top" class="headerlink" title="top"></a>top</h6><p>1.挖矿病毒典型的特征的是CPU占用率高，所以我们第一使用<strong>Top</strong>命令来查看。</p><p><img src="media/linux应急响应/image-20220928143739006.png" alt="image-20220928143739006"></p><p>可以看到目前的CPU的占用率已经高达97.7%，说明这个程序确实存在问题。</p><p>对于top命令，我们关注的点主要有以下几点：1.用户，2.cpu信息，3.时间</p><p>用户主要是在top命令最上一行，可以看到目前是1个用户，cpu信息主要关注cpu占用率，进程执行数量，还有时间信息，时间信息代表运行的时间总时长，可以从这里推断病毒植入时间，同时也方便我们查看日志时有目标的去寻找信息。</p><h6 id="ls-al-proc-pid-exe"><a href="#ls-al-proc-pid-exe" class="headerlink" title="ls -al /proc/[pid]/exe"></a>ls -al /proc/[pid]/exe</h6><p>2.定位异常文件，我们在Top命令中发现一个异常进程，接着我们就需要定位他的位置，使用命令<strong>ls -al /proc/11134/exe</strong>来定位进程的文件位置</p><p><img src="media/linux应急响应/image-20220928144933584.png" alt="image-20220928144933584"></p><p>这条命令可以看到进程所对应的文件位置，同时也能看到程序运行的开始时间，定位在文件位置后，我们<strong>ls -al [文件]</strong>，可以看到文件创建的时间。</p><p><img src="media/linux应急响应/image-20220928145137475.png" alt="image-20220928145137475"></p><h6 id="netstat-antp"><a href="#netstat-antp" class="headerlink" title="netstat -antp"></a>netstat -antp</h6><p>3.使用<strong>netstat -antp</strong>查看当前外联情况，我们一般需要看的状态为已连接状态也就是ESTABLISHED，同时对应PID的值来看。可以看到这里存在之前占用CPU高的可疑程序外联的一个IP地址，我们在威胁情报中查询一下这个地址。</p><p><img src="media/linux应急响应/image-20220928145927962.png" alt="image-20220928145927962"></p><p>在威胁情报中已经收录此地址，为一个矿池地址，这里我们可以初步确定为挖矿程序。</p><p><img src="media/linux应急响应/image-20220928150356353.png" alt="image-20220928150356353"></p><h6 id="strings"><a href="#strings" class="headerlink" title="strings"></a>strings</h6><p>一般来说，在发现挖矿安全事件客户首先做的事断网处理，并且服务器也不会让插入介质，所以我们对可疑程序不能快速的上传至云沙箱中分析，这里就借助<strong>Strings</strong>命令简单的查看一下文件内容。对于文件内容主要进行关键字筛选集中在pool，pool.，tcp，wallet等。大部分程序会存有钱包地址，地址池地址等。我们通过strings可以看到存在poolwallet，pool.hashvault.pro关键字，且pool.hashvault.pro已经被标记为矿池地址，所以直接能够确定此程序为挖矿程序。</p><p><img src="media/linux应急响应/image-20220928154411390.png" alt="image-20220928154411390"></p><p><img src="media/linux应急响应/image-20220928154505197.png" alt="image-20220928154505197"></p><h6 id="lsof-p-pid"><a href="#lsof-p-pid" class="headerlink" title="lsof -p [pid]"></a>lsof -p [pid]</h6><p>对于已经确定为病毒程序文件，我们还是先不要着急去kill进程，需要对进程近一步的进行分析，从而防止我们后续无法干净清除病毒程序。<strong>lsof -p 11303</strong>查看病毒进程调用的所有文件。这里我们可以看到此程序调用的文件较少，无异常文件。</p><p><img src="media/linux应急响应/image-20220928162803387.png" alt="image-20220928162803387"></p><h6 id="systemctl-status-pid"><a href="#systemctl-status-pid" class="headerlink" title="systemctl status pid"></a>systemctl status pid</h6><p>这里还需要查询程序是否存在守护进程，如果刚才上面我们直接kill掉进程，挖矿病毒程序还会重新自启动。使用命令<strong>systemctl status 11303</strong> ，可以看到未存在守护进程。对于有守护进程的病毒程序，先要kill掉守护进程，接着再kill掉挖矿进程。</p><p><img src="media/linux应急响应/image-20220928165727844.png" alt="image-20220928165727844"></p><h6 id="crontab-l"><a href="#crontab-l" class="headerlink" title="crontab -l"></a>crontab -l</h6><p>经过上面一系列操作，我们已经能找到挖矿病毒程序所有相关的内容，但是我们还需要进一步去确认有无残留的权限维持的相关内容。<strong>crontab -l</strong> 枚举定时任务，这里我们可以看到并无任何定时任务。</p><p><img src="media/linux应急响应/image-20220928171307581.png" alt="image-20220928171307581"></p><h6 id="systemctl-list-unit-files"><a href="#systemctl-list-unit-files" class="headerlink" title="systemctl list-unit-files"></a>systemctl list-unit-files</h6><p>对于自启动服务我们同样需要关心，使用<strong>systemctl list-unit-files | grep enabled</strong>来筛选开机自启动的服务。如果存在与挖矿病毒相关的自启服务，使用命令<strong>systemctl disable  服务名</strong>关闭。我们需要关注systemd 配置文件：</p><p>①/etc/systemd/system 存放系统启动的默认级别及启动的unit的软连接，优先级最高。</p><p>②/run/systemd/system，系统执行过程中产生的服务脚本，优先级次之。</p><p>③/usr/lib/systemd/system 存放系统上所有的启动文件。优先级最低</p><p>时间允许的话可以分别查看这3个文件夹的文件。</p><p><img src="media/linux应急响应/image-20220928172233340.png" alt="image-20220928172233340" style="zoom:50%;" /> </p><h5 id="user相关"><a href="#user相关" class="headerlink" title="user相关"></a>user相关</h5><h6 id="awk-F-‘-3-0-print-1-’-etc-passwd"><a href="#awk-F-‘-3-0-print-1-’-etc-passwd" class="headerlink" title="awk -F: ‘$3==0{print $1}’ /etc/passwd"></a>awk -F: ‘$3==0{print $1}’ /etc/passwd</h6><p>我们检查完服务，进程后，还需要对用户进行检查，防止二次被植入病毒程序。使用<strong>awk -F: ‘$3==0{print $1}’ /etc/passwd</strong>命令来查询特权用户。</p><p><img src="media/linux应急响应/image-20220929085259404.png" alt="image-20220929085259404"></p><h6 id="cat-etc-passwd-grep-v-nologin"><a href="#cat-etc-passwd-grep-v-nologin" class="headerlink" title="cat /etc/passwd | grep -v nologin"></a>cat /etc/passwd | grep -v nologin</h6><p>查询除无法登录以外的用户，有无新增<strong>cat /etc/passwd | grep -v nologin</strong>。</p><p><img src="media/linux应急响应/image-20220929085453191.png" alt="image-20220929085453191"></p><h6 id="awk-‘-1-6-print-1-’-etc-shadow"><a href="#awk-‘-1-6-print-1-’-etc-shadow" class="headerlink" title="awk ‘/$1|$6/{print $1}’ /etc/shadow"></a>awk ‘/$1|$6/{print $1}’ /etc/shadow</h6><p>查询可以远程登录的帐号信息，<strong>awk ‘/$1|$6/{print $1}’ /etc/shadow</strong>。</p><p><img src="media/linux应急响应/image-20220929085555064.png" alt="image-20220929085555064"></p><h5 id="var-log相关"><a href="#var-log相关" class="headerlink" title="/var/log相关"></a>/var/log相关</h5><p>在对整个服务器进行检查完成后，还需要对日志进行分析，来还原攻击</p><h6 id="var-log-btmp"><a href="#var-log-btmp" class="headerlink" title="/var/log/btmp"></a>/var/log/btmp</h6><p>登陆失败的用户日志一般存储在<strong>/var/log/btmp</strong>中，使用lastb可以进行查看。</p><p><img src="media/linux应急响应/image-20220929095705442.png" alt="image-20220929095705442" style="zoom:50%;" /></p><h6 id="var-log-lastlog"><a href="#var-log-lastlog" class="headerlink" title="/var/log/lastlog"></a>/var/log/lastlog</h6><p>所有用户登陆日志在 <strong>/var/log/lastlog</strong>中，可以使用lastlog来查看</p><p><img src="media/linux应急响应/image-20220929100638621.png" alt="image-20220929100638621" style="zoom:50%;" /></p><h6 id="var-log-wtmp"><a href="#var-log-wtmp" class="headerlink" title="/var/log/wtmp"></a>/var/log/wtmp</h6><p>系统的成功登录、关机、重启等会存储在 <strong>/var/log/wtmp</strong>中，使用命令 last可以查看。</p><p><img src="media/linux应急响应/image-20220929102011104.png" alt="image-20220929102011104" style="zoom:50%;" /></p><h6 id="var-log-auth"><a href="#var-log-auth" class="headerlink" title="/var/log/auth"></a>/var/log/auth</h6><p>这里需要注意的<strong>ubuntu的用户认证日志存储在/var/log/auth.log</strong>中，而<strong>centos的用户认证日志存储在/var/log/secure</strong>中，使用命令<strong>cat /var/log/auth.log | grep -i “accepted password”</strong>筛选登录成功的日志信息。</p><p><img src="media/linux应急响应/image-20220929155949936.png" alt="image-20220929155949936"></p><p>使用命令可以查看<strong>cat /var/log/auth.log | grep -i “failure”</strong>筛选登录失败日志</p><p><img src="media/linux应急响应/image-20220929160111510.png" alt="image-20220929160111510"></p><p>对于想查看<strong>SSH爆破使用命令cat /var/log/secure|awk ‘/Failed/{print $(NF-3)}’|sort|uniq -c|awk ‘{print $2”=”$1;}’</strong>可来筛选出来次数，进行一个分辨。从下面可以明显的看到被爆破的痕迹。</p><p><img src="media/linux应急响应/image-20220929160218818.png" alt="image-20220929160218818"></p><h6 id="var-log-wtmp-1"><a href="#var-log-wtmp-1" class="headerlink" title="/var/log/wtmp"></a>/var/log/wtmp</h6><p>查看机器创建以来登陆过的用户，使用<strong>last</strong>命令查看。</p><p><img src="media/linux应急响应/image-20220929161111132.png" alt="image-20220929161111132" style="zoom:50%;" /></p><h6 id="history"><a href="#history" class="headerlink" title="history"></a>history</h6><p>其实history局限性很大，我们看到的history只是SSH连接后的产生记录，对于使用nc，shell，脚本等执行的一些命令是不会记录出来的。从下面可以看到我们只能看到反弹shell命令，具体反弹后输入了什么命令history是不做记录的。</p><p><img src="media/linux应急响应/image-20220929103902485.png" alt="image-20220929103902485"></p><p><strong>history | more</strong> 带时间显示</p><p><img src="media/linux应急响应/image-20220929105304839.png" alt="image-20220929105304839" style="zoom:50%;" /></p><h6 id="bash-history"><a href="#bash-history" class="headerlink" title=".bash_history"></a>.bash_history</h6><p>上面我们提到history的局限性比较大，所以我们需要结合<strong>.bash_history</strong>的命令一起来看历史的操作命令。</p><p><img src="media/linux应急响应/image-20220929105514316.png" alt="image-20220929105514316"></p><p>以上是对病毒挖矿应急响应的一个整体流程与命令，基本上是能够将所有的风险项都检测出来，但实际的应急过程中，常常还会被客户单位问一个问题（<strong>针对没有web服务的客户单位</strong>）：<strong>本单位的服务器对外发起的攻击怎么查?</strong>其实刚开始对于这个问题自己表示也很懵，除了看历史命令就没有什么方式去看，其实还可以从流量特征方面去分析是否对外发起过攻击，但是具体是什么攻击确实没有方法去看。除非是服务器上留存一些扫描攻击或漏洞利用工具。这里再引入一点，<strong>如果发现服务器日志被删除掉，可以进行恢复</strong>。</p><p>假设我们服务器现在被删除了auth.log与auth.log.1日志文件</p><p><img src="media/linux应急响应/image-20220930090433757.png" alt="image-20220930090433757"></p><p><strong>第一步先查看文件对应的PID值：lsof | grep auth.log</strong>，可以看到PID的值为420，文件对应的描述号为7。</p><p><img src="media/linux应急响应/image-20220930090617975.png" alt="image-20220930090617975"></p><p><strong>第二步在/proc下找对应的文件：ls -al /proc/420/fd/7</strong></p><p><img src="media/linux应急响应/image-20220930090824869.png" alt="image-20220930090824869"></p><p><strong>第三步将文件从/proc/420/fd/7拷贝到/var/log/auth.log：cp /proc/420/fd/7 /var/log/auth.log</strong></p><p><img src="media/linux应急响应/image-20220930091004222.png" alt="image-20220930091004222"></p><p>这样文件就被恢复了，但是需要记得的是，如果使用命令<strong>cat  /dev/null &gt; /var/log/文件名</strong>这种方式的话，是无法进行恢复的。</p><h3 id="webshell植入"><a href="#webshell植入" class="headerlink" title="webshell植入"></a>webshell植入</h3><p>对于webshell植入类型的应急响应，我们需要的是注意三点，第一点是对网站根目录下所有的文件进行排查，防止留存木马；第二点是对服务器进行排查，防止留存后门；第三点是需要排查清楚通过什么漏洞入侵进的服务器。</p><p>首先我们需要了解各中间件日志存放的位置：</p><h6 id="weblogic"><a href="#weblogic" class="headerlink" title="weblogic"></a>weblogic</h6><p>weblogic会有3种日志，分别是accesslog，Server log和domain log。</p><p>对于weblogic的日志位置一般在<strong>weblogic安装目录\user_projects\domains下</strong></p><h6 id="tomcat"><a href="#tomcat" class="headerlink" title="tomcat"></a>tomcat</h6><p>tomcat日志一般存放在：<strong>tomcat安装目录/logs</strong>下</p><p><img src="media/linux应急响应/image-20220930102842553.png" alt="image-20220930102842553"></p><p>如果在logs下未找到，可以在<strong>conf/logging.properties</strong>查看存放的位置</p><p><img src="media/linux应急响应/image-20220930103105925.png" alt="image-20220930103105925"></p><h6 id="apache"><a href="#apache" class="headerlink" title="apache"></a>apache</h6><p>apache日志一般存放在网站根目录下，要是没有找到可以从<strong>httpd.conf</strong>配置文件中找：</p><p><strong>grep -i”CustomLog” /etc/httpd/conf/httpd.conf</strong></p><p><strong>grep -i”ErrorLog” /etc/httpd/conf/httpd.conf</strong></p><h6 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h6><p>nginx的日志位置可以从nginx根目录下去找，或者在nginx目录下找到<strong>nginx.conf</strong>文件来看ningx的日志路径。</p><p>如果找到不到nginx.conf文件，先定位nginx进程<strong>ps -ef | grep nginx</strong>找到目录后，在目录文件下寻找具体文件即可。</p><p><img src="media/linux应急响应/image-20220930104421656.png" alt="image-20220930104421656"></p><h6 id="Mysql数据库"><a href="#Mysql数据库" class="headerlink" title="Mysql数据库"></a>Mysql数据库</h6><p>linux系统下主要以安装mysql为主，为了数据安全，同样还是得查看数据库日志。</p><p>先使用<strong>SHOW VARIABLES LIKE ‘gen%’;</strong>查看数据库操作状态以及操作日志存放的位置，默认general_log是关闭的。</p><p><img src="media/linux应急响应/image-20220930141613216.png" alt="image-20220930141613216" style="zoom:50%;" /></p><p>通过位置我们查看日志信息，可以看到其实记录还是很全面的，包括执行过的命令，连接过的IP，对数据库的操作。</p><p><img src="media/linux应急响应/image-20220930144122523.png" alt="image-20220930144122523"></p><p>同时也会记录对数据库爆破操作。所以，<strong>我们的在日常运维的过程中一定要开启日志记录。</strong></p><p><img src="media/linux应急响应/image-20220930144443584.png" alt="image-20220930144443584"></p><p>使用<strong>show full processlist;</strong>查看正在对数据库的连接。</p><p><img src="media/linux应急响应/image-20220930142548486.png" alt="image-20220930142548486" style="zoom:50%;" /></p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>这里我们以Tomcat为例，前面我们也提到tomcat的日志的位置，我们直接看日志，发现其中一个IP地址，对/manager/status页面进行爆破（时间间隔短），这个页面也就是tomcat-mangaer页面。</p><h6 id="tomcat-log"><a href="#tomcat-log" class="headerlink" title="/tomcat/log"></a>/tomcat/log</h6><p><img src="media/linux应急响应/image-20220930150708213.png" alt="image-20220930150708213" style="zoom:50%;" /></p><p>在经过尝试后，还是登录成功，应该是爆出来用户名密码，接着在/manager/html/list进行了文件上传，并且上传成功。</p><p><img src="media/linux应急响应/image-20220930151232152.png" alt="image-20220930151232152"></p><p>紧接着对shell/shell.jsp进行了访问。到这里可以分析到利用了tomcat-manage页面进行口令爆破，同时上传了webshell，进行了连接。</p><p><img src="media/linux应急响应/image-20220930151530949.png" alt="image-20220930151530949"></p><p>在<strong>catalina.logz</strong>中同样能看到爆破过程。</p><p><img src="media/linux应急响应/image-20220930151846910.png" alt="image-20220930151846910" style="zoom:50%;" /></p><p>接着我们去寻找shell位置，tomcat上传的shell一般会在webapps下面，可以看到shell.jsp的文件。</p><p><img src="media/linux应急响应/image-20220930152056952.png" alt="image-20220930152056952"></p><p>这里我们只是找到一个shell.jsp的文件，我们还需要查找其他的目录是否存在Webshell。</p><h6 id="find-目录-name-‘文件关键字‘"><a href="#find-目录-name-‘文件关键字‘" class="headerlink" title="find /目录 -name  ‘文件关键字‘"></a>find /目录 -name  ‘<em>文件关键字</em>‘</h6><p><strong>find /usr/local/tomcat -name ‘<em>jsp</em>‘</strong></p><p>这里将tomcat目录下所有jsp文件全部罗列出来。</p><p><img src="media/linux应急响应/image-20220930161602111.png" alt="image-20220930161602111" style="zoom:50%;" /></p><p>对于这么多jsp文件，我们其实会很没有耐心去一个一个文件看，所以就需要更深的检索。</p><h6 id="find-目录-name-‘文件关键字‘-ls"><a href="#find-目录-name-‘文件关键字‘-ls" class="headerlink" title="find /目录 -name  ‘文件关键字‘ -ls"></a>find /目录 -name  ‘<em>文件关键字</em>‘ -ls</h6><p>将所有的jsp文件的详细信息罗列出来，这样也更方便我们去进行通过每个文件的具体信息来进行排查。</p><p><img src="media/linux应急响应/image-20220930161923414.png" alt="image-20220930161923414"></p><p>但是在有些时候，项目文件太多，这种方式又显的很笨拙，所以需要进一步再进行命令优化。</p><h6 id="find-目录-name-‘文件关键字‘-命令集"><a href="#find-目录-name-‘文件关键字‘-命令集" class="headerlink" title="find /目录 -name  ‘文件关键字‘ -命令集"></a>find /目录 -name  ‘<em>文件关键字</em>‘ -命令集</h6><p><strong>find /目录 -name  ‘<em>文件关键字</em>‘ -amin -10   查找在系统中最后10钟访问的文件</strong></p><p><strong>find /目录 -name  ‘<em>文件关键字</em>‘ -atime -2   查找在系统中最后48小时访问的文件</strong></p><p><strong>find /目录 -name  ‘<em>文件关键字</em>‘  -mmin -5  查找在系统中最后5 分钟里修改过的文件</strong></p><p><strong>find /目录 -name  ‘<em>文件关键字</em>‘  -mtime -1 查找在系统中最后24 小时里修改过的文件</strong></p><p>我们查找下最后12小时内修改过的文件，搜索范围又变小了，再结合入侵的时间点，还是相对比较容易找出其他的木马程序。</p><p><img src="media/linux应急响应/image-20220930163430418.png" alt="image-20220930163430418"></p><p>其实在linux中，还有很多命令去组合进行搜索，找到适合自己的一套搜索命令更能快速去进行问题的排查。后面的排查还需要对服务器进行一个排查，防止对方留存后门程序进行一个持久化的控制。后续的排查过程可以与我们对病毒挖矿类的响应过程进行排查。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在我们进行应急响应的过程中，无论是遇到什么情况，都需要记住，首先和客户需要进行详细的沟通，确认网络环境，确认什么事件。在能够断网的情况下尽量做到断网排查，第一时间不要去着急结束相关进程和删除文件操作，防止后面有些点溯源不到位的情况。其次，我们在做的每一步对文件的操作，拍照或截图留存证据，对于溯源的过程也需要进行证据留存。在排查的过程中，一定要做到细致，不要放过任何的可疑文件，对于一些可疑的进程或程序，追踪他的进程链条总能去判断此程序的可疑性。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/16107.html"/>
      <url>/posts/16107.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* @font-face {  font-family: Candyhome;  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/Candyhome.ttf);  font-display: swap;  font-weight: lighter;} */@font-face {  font-family: ZhuZiAYuanJWD;  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/ZhuZiAWan.woff2);  font-display: swap;  font-weight: lighter;}div#menus {  font-family: 'ZhuZiAYuanJWD';}h1#site-title {  font-family: ZhuZiAYuanJWD;  font-size: 3em !important;}a.article-title,a.blog-slider__title,a.categoryBar-list-link,h1.post-title {  font-family: ZhuZiAYuanJWD;}.iconfont {  font-family: 'iconfont' !important;  font-size: 3em;  /* 可以定义图标大小 */  font-style: normal;  -webkit-font-smoothing: antialiased;  -moz-osx-font-smoothing: grayscale;}/* 时间轴生肖icon */svg.icon {  /* 这里定义svg.icon，避免和Butterfly自带的note标签冲突 */  width: 1em;  height: 1em;  /* width和height定义图标的默认宽度和高度*/  vertical-align: -0.15em;  fill: currentColor;  overflow: hidden;}.icon-zhongbiao::before {  color: #f7c768;}/* 解决artitalk的图标问题 */#uploadSource > svg {  width: 1.19em;  height: 1.5em;}/*top-img黑色透明玻璃效果移除，不建议加，除非你执着于完全一图流或者背景图对比色明显 */#page-header:not(.not-top-img):before {  background-color: transparent !important;}/* 首页文章卡片 */#recent-posts > .recent-post-item {  background: rgba(255, 255, 255, 0.9);}/* 首页侧栏卡片 */#aside-content .card-widget {  background: rgba(255, 255, 255, 0.9);}/* 文章页面正文背景 */div#post {  background: rgba(255, 255, 255, 0.9);}/* 分页页面 */div#page {  background: rgba(255, 255, 255, 0.9);}/* 归档页面 */div#archive {  background: rgba(255, 255, 255, 0.9);}/* 标签页面 */div#tag {  background: rgba(255, 255, 255, 0.9);}/* 分类页面 */div#category {  background: rgba(255, 255, 255, 0.9);}/*夜间模式伪类遮罩层透明*/[data-theme='dark'] #recent-posts > .recent-post-item {  background: #121212;}[data-theme='dark'] .card-widget {  background: #121212 !important;}[data-theme='dark'] div#post {  background: #121212 !important;}[data-theme='dark'] div#tag {  background: #121212 !important;}[data-theme='dark'] div#archive {  background: #121212 !important;}[data-theme='dark'] div#page {  background: #121212 !important;}[data-theme='dark'] div#category {  background: #121212 !important;}[data-theme='dark'] div#category {  background: transparent !important;}/* 页脚透明 */#footer {  background: transparent !important;}/* 头图透明 */#page-header {  background: transparent !important;}#rightside > div > button {  border-radius: 5px;}/* 滚动条 */::-webkit-scrollbar {  width: 10px;  height: 10px;}::-webkit-scrollbar-thumb {  background-color: #425aef;  border-radius: 2em;}::-webkit-scrollbar-corner {  background-color: transparent;}::-moz-selection {  color: #fff;  background-color: #425aef;}/* 音乐播放器 *//* .aplayer .aplayer-lrc {  display: none !important;} */.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body {  left: -66px !important;  transition: all 0.3s;  /* 默认情况下缩进左侧66px，只留一点箭头部分 */}.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body:hover {  left: 0 !important;  transition: all 0.3s;  /* 鼠标悬停是左侧缩进归零，完全显示按钮 */}.aplayer.aplayer-fixed {  z-index: 999999 !important;}/* 评论框  */.vwrap {  box-shadow: 2px 2px 5px #bbb;  background: rgba(255, 255, 255, 0.3);  border-radius: 8px;  padding: 30px;  margin: 30px 0px 30px 0px;}/* 设置评论框 */.vcard {  box-shadow: 2px 2px 5px #bbb;  background: rgba(255, 255, 255, 0.3);  border-radius: 8px;  padding: 30px;  margin: 30px 0px 0px 0px;}/* 鼠标图标 */body {  cursor: url('/img/x1.cur'), auto;}a,[type='button']:not(:disabled),[type='reset']:not(:disabled),[type='submit']:not(:disabled),button:not(:disabled) {  cursor: url('/img/x2.cur'), auto !important;}/* md网站下划线 */#article-container a:hover {  text-decoration: none !important;}#article-container #hpp_talk p img {  display: inline;}/* 404页面 */#error-wrap {  position: absolute;  top: 40%;  right: 0;  left: 0;  margin: 0 auto;  padding: 0 1rem;  max-width: 1000px;  transform: translate(0, -50%);}#error-wrap .error-content {  display: flex;  flex-direction: row;  justify-content: center;  align-items: center;  margin: 0 1rem;  height: 18rem;  border-radius: 8px;  background: var(--card-bg);  box-shadow: var(--card-box-shadow);  transition: all 0.3s;}#error-wrap .error-content .error-img {  box-flex: 1;  flex: 1;  height: 100%;  border-top-left-radius: 8px;  border-bottom-left-radius: 8px;  background-color: #425aef;  background-position: center;  background-size: cover;}#error-wrap .error-content .error-info {  box-flex: 1;  flex: 1;  padding: 0.5rem;  text-align: center;  font-size: 14px;  font-family: Titillium Web, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft JhengHei', 'Microsoft YaHei', sans-serif;}#error-wrap .error-content .error-info .error_title {  margin-top: -4rem;  font-size: 9em;}#error-wrap .error-content .error-info .error_subtitle {  margin-top: -3.5rem;  word-break: break-word;  font-size: 1.6em;}#error-wrap .error-content .error-info a {  display: inline-block;  margin-top: 0.5rem;  padding: 0.3rem 1.5rem;  background: var(--btn-bg);  color: var(--btn-color);}#body-wrap.error .aside-list {  display: flex;  flex-direction: row;  flex-wrap: nowrap;  bottom: 0px;  position: absolute;  padding: 1rem;  width: 100%;  overflow: scroll;}#body-wrap.error .aside-list .aside-list-group {  display: flex;  flex-direction: row;  flex-wrap: nowrap;  max-width: 1200px;  margin: 0 auto;}#body-wrap.error .aside-list .aside-list-item {  padding: 0.5rem;}#body-wrap.error .aside-list .aside-list-item img {  width: 100%;  object-fit: cover;  border-radius: 12px;}#body-wrap.error .aside-list .aside-list-item .thumbnail {  overflow: hidden;  width: 230px;  height: 143px;  background: var(--heo-card-bg);  display: flex;}#body-wrap.error .aside-list .aside-list-item .content .title {  -webkit-line-clamp: 2;  overflow: hidden;  display: -webkit-box;  -webkit-box-orient: vertical;  line-height: 1.5;  justify-content: center;  align-items: flex-end;  align-content: center;  padding-top: 0.5rem;  color: white;}#body-wrap.error .aside-list .aside-list-item .content time {  display: none;}/* 代码框主题 */#article-container figure.highlight {  border-radius: 10px;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/pace.css"/>
      <url>/css/pace.css</url>
      
        <content type="html"><![CDATA[.pace {    -webkit-pointer-events: none;    pointer-events: none;    -webkit-user-select: none;    -moz-user-select: none;    user-select: none;  }    .pace-inactive {    display: none;  }    .pace .pace-progress {    background: #e90f92;    position: fixed;    z-index: 2000;    top: 0;    right: 100%;    width: 100%;    height: 2px;  }    .pace .pace-progress-inner {    display: block;    position: absolute;    right: 0px;    width: 100px;    height: 100%;    box-shadow: 0 0 10px #e90f92, 0 0 5px #e90f92;    opacity: 1.0;    -webkit-transform: rotate(3deg) translate(0px, -4px);    -moz-transform: rotate(3deg) translate(0px, -4px);    -ms-transform: rotate(3deg) translate(0px, -4px);    -o-transform: rotate(3deg) translate(0px, -4px);    transform: rotate(3deg) translate(0px, -4px);  }    .pace .pace-activity {    display: block;    position: fixed;    z-index: 2000;    top: 15px;    right: 15px;    width: 14px;    height: 14px;    border: solid 2px transparent;    border-top-color: #e90f92;    border-left-color: #e90f92;    border-radius: 10px;    -webkit-animation: pace-spinner 400ms linear infinite;    -moz-animation: pace-spinner 400ms linear infinite;    -ms-animation: pace-spinner 400ms linear infinite;    -o-animation: pace-spinner 400ms linear infinite;    animation: pace-spinner 400ms linear infinite;  }    @-webkit-keyframes pace-spinner {    0% { -webkit-transform: rotate(0deg); transform: rotate(0deg); }    100% { -webkit-transform: rotate(360deg); transform: rotate(360deg); }  }  @-moz-keyframes pace-spinner {    0% { -moz-transform: rotate(0deg); transform: rotate(0deg); }    100% { -moz-transform: rotate(360deg); transform: rotate(360deg); }  }  @-o-keyframes pace-spinner {    0% { -o-transform: rotate(0deg); transform: rotate(0deg); }    100% { -o-transform: rotate(360deg); transform: rotate(360deg); }  }  @-ms-keyframes pace-spinner {    0% { -ms-transform: rotate(0deg); transform: rotate(0deg); }    100% { -ms-transform: rotate(360deg); transform: rotate(360deg); }  }  @keyframes pace-spinner {    0% { transform: rotate(0deg); transform: rotate(0deg); }    100% { transform: rotate(360deg); transform: rotate(360deg); }  }  /* 在下面修改进度条外观 */  .pace .pace-progress {    background: #1ef4fbec; /*进度条颜色*/    height: 3px;/* 进度条厚度 */  }  .pace .pace-progress-inner {    box-shadow: 0 0 10px #1ef4fbce, 0 0 5px #1ecffbd0; /*阴影颜色*/  }  .pace .pace-activity {    border-top-color: #1edafbe5;/*上边框颜色*/    border-left-color: #1ef4fbec;/*左边框颜色*/  }      作者: 『轻笑Chuckle』  链接: https://www.chuckle.top/article/13d6481a.html  来源: 轻笑Chuckle  著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/runtime/runtime.js"/>
      <url>/js/runtime/runtime.js</url>
      
        <content type="html"><![CDATA[var now=new Date;function createtime(){var grt=new Date("09/09/2022 00:00:00");now.setTime(now.getTime()+250);var days=(now-grt)/1e3/60/60/24,dnum=Math.floor(days),hours=(now-grt)/1e3/60/60-24*dnum,hnum=Math.floor(hours);1==String(hnum).length&&(hnum="0"+hnum);var minutes=(now-grt)/1e3/60-1440*dnum-60*hnum,mnum=Math.floor(minutes);1==String(mnum).length&&(mnum="0"+mnum);var seconds=(now-grt)/1e3-86400*dnum-3600*hnum-60*mnum,snum=Math.round(seconds);1==String(snum).length&&(snum="0"+snum);let currentTimeHtml="";currentTimeHtml=hnum<18&&hnum>=9?`<span class='textTip' <br> 本站居然运行了 ${dnum} 天</span><span id='runtime'> ${hnum} 小时 ${mnum} 分 ${snum} 秒 </span> <i class='fas fa-heartbeat' style='color:red'></i>`:`<span class='textTip'> <br> 本站居然运行了 ${dnum} 天</span><span id='runtime'> ${hnum} 小时 ${mnum} 分 ${snum} 秒 </span> <i class='fas fa-heartbeat' style='color:red'></i>`,document.getElementById("workboard")&&(document.getElementById("workboard").innerHTML=currentTimeHtml)}setInterval(()=>{createtime()},250);]]></content>
      
    </entry>
    
    
  
</search>
